// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: opentelemetry/proto/collector/metrics/v1/metrics_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - opentelemetry.proto.collector.metrics.v1.MetricsService

/// Namespace containing generated types for the "opentelemetry.proto.collector.metrics.v1.MetricsService" service.
internal enum Opentelemetry_Proto_Collector_Metrics_V1_MetricsService {
    /// Service descriptor for the "opentelemetry.proto.collector.metrics.v1.MetricsService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "opentelemetry.proto.collector.metrics.v1.MetricsService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "Export" metadata.
        internal enum Export {
            /// Request type for "Export".
            internal typealias Input = Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest
            /// Response type for "Export".
            internal typealias Output = Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse
            /// Descriptor for "Export".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "opentelemetry.proto.collector.metrics.v1.MetricsService"),
                method: "Export"
            )
        }
        /// Descriptors for all methods in the "opentelemetry.proto.collector.metrics.v1.MetricsService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Export.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "opentelemetry.proto.collector.metrics.v1.MetricsService" service.
    internal static let opentelemetry_proto_collector_metrics_v1_MetricsService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "opentelemetry.proto.collector.metrics.v1.MetricsService")
}

// MARK: opentelemetry.proto.collector.metrics.v1.MetricsService (server)

extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsService {
    /// Streaming variant of the service protocol for the "opentelemetry.proto.collector.metrics.v1.MetricsService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service that can be used to push metrics between one Application
    /// > instrumented with OpenTelemetry and a collector, or between a collector and a
    /// > central collector.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Export" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > For performance reasons, it is recommended to keep this RPC
        /// > alive for the entire life of the application.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse` messages.
        func export(
            request: GRPCCore.StreamingServerRequest<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>
    }

    /// Service protocol for the "opentelemetry.proto.collector.metrics.v1.MetricsService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service that can be used to push metrics between one Application
    /// > instrumented with OpenTelemetry and a collector, or between a collector and a
    /// > central collector.
    internal protocol ServiceProtocol: Opentelemetry_Proto_Collector_Metrics_V1_MetricsService.StreamingServiceProtocol {
        /// Handle the "Export" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > For performance reasons, it is recommended to keep this RPC
        /// > alive for the entire life of the application.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse` message.
        func export(
            request: GRPCCore.ServerRequest<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>
    }

    /// Simple service protocol for the "opentelemetry.proto.collector.metrics.v1.MetricsService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service that can be used to push metrics between one Application
    /// > instrumented with OpenTelemetry and a collector, or between a collector and a
    /// > central collector.
    internal protocol SimpleServiceProtocol: Opentelemetry_Proto_Collector_Metrics_V1_MetricsService.ServiceProtocol {
        /// Handle the "Export" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > For performance reasons, it is recommended to keep this RPC
        /// > alive for the entire life of the application.
        ///
        /// - Parameters:
        ///   - request: A `Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse` to respond with.
        func export(
            request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Opentelemetry_Proto_Collector_Metrics_V1_MetricsService.Method.Export.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>(),
            handler: { request, context in
                try await self.export(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsService.ServiceProtocol {
    internal func export(
        request: GRPCCore.StreamingServerRequest<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse> {
        let response = try await self.export(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsService.SimpleServiceProtocol {
    internal func export(
        request: GRPCCore.ServerRequest<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse> {
        return GRPCCore.ServerResponse<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>(
            message: try await self.export(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}